---
import { LOGO_IMAGE, SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";

export interface Props {
  activeNav?: "home" | "posts" | "archives" | "tags" | "about" | "search" | "resources";
}

const { activeNav } = Astro.props;
---

<header>
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  
  <div class="nav-container">
    <div class="top-nav-wrap" data-astro-prefetch>
      <!-- Logo -->
      <a href="/" class="logo-link" aria-label="Home">
        <img src="/assets/logo-transparent.png" alt="Site Logo" class="logo-image" />
      </a>
      
      <!-- Navigation -->
      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class ="menu-icon"
          >
            <line x1="7" y1="12" x2="21" y2="12" class="line"></line>
            <line x1="3" y1="6" x2="21" y2="6" class="line"></line>
            <line x1="12" y1="18" x2="21" y2="18" class="line"></line>
            <line x1="18" y1="6" x2="6" y2="18" class="close"></line>
            <line x1="6" y1="6" x2="18" y2="18" class="close"></line>
          </svg>
        </button>

        <ul id="menu-items" class="display-none sm:flex">
          <li>
            <a href={`${import.meta.env.BASE_URL}`} class={activeNav === "home" ? "active" : ""}>
              Home
            </a>
          </li>
          <li>
            <a href={`${import.meta.env.BASE_URL}posts/`} class={activeNav === "posts" ? "active" : ""}>
              Posts
            </a>
          </li>
          <li>
            <a href={`${import.meta.env.BASE_URL}about/`} class={activeNav === "about" ? "active" : ""}>
              About
            </a>
          </li>
          
          <!-- Resources Dropdown -->
          <li class="dropdown">
            <button class={`dropdown-toggle ${(activeNav === "books" || activeNav === "resources") ? "active" : ""}`}>
              <span>Resources</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="dropdown-arrow"
                width="12"
                height="12"
                viewBox="0 0 24 24"
                fill="currentColor"
                stroke="none"
              >
                <path d="M7 10l5 5 5-5z"/>
              </svg>
            </button>
            <ul class="dropdown-menu">
              <li>
                <a href={`${import.meta.env.BASE_URL}resources/Books/`}>
                  Books
                </a>
              </li>
            </ul>
          </li>

          <!-- Archives -->
          {SITE.showArchives && (
            <li>
              <LinkButton
                href={`${import.meta.env.BASE_URL}archives/`}
                className={`focus-outline flex justify-center p-3 sm:p-1`}
                ariaLabel="archives"
                title="Archives"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class:list={[
                    "icon icon-tabler icons-tabler-outline !hidden sm:!inline-block",
                    activeNav === "archives" && "!stroke-skin-accent",
                  ]}
                >
                  <>
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M3 4m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z" />
                    <path d="M5 8v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-10" />
                    <path d="M10 12l4 0" />
                  </>
                </svg>
                <span
                  class:list={[
                    "sm:sr-only",
                    activeNav === "archives" && "active",
                  ]}
                >
                  Archives
                </span>
              </LinkButton>
            </li>
          )}

          <!-- Search -->
          <li>
            <LinkButton
              href={`${import.meta.env.BASE_URL}search/`}
              className={`focus-outline p-3 sm:p-1 ${activeNav === "search" ? "active" : ""} flex`}
              ariaLabel="search"
              title="Search"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="scale-125 sm:scale-100"
              >
                <path d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z" />
              </svg>
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>

          <!-- Theme Toggle -->
          {SITE.lightAndDarkMode && (
            <li>
              <button
                id="theme-btn"
                class="focus-outline"
                title="Toggles light & dark"
                aria-label="auto"
                aria-live="polite"
              >
                <svg xmlns="http://www.w3.org/2000/svg" id="moon-svg">
                  <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg">
                  <path d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z" />
                </svg>
              </button>
            </li>
          )}
        </ul>
      </nav>
    </div>
  </div>
</header>

<style>
  /* Skip to content */
  #skip-to-content {
    @apply absolute -top-full left-16 z-50 bg-skin-accent px-3 py-2 text-skin-inverted transition-all focus:top-4;
  }

  header {
    @apply relative overflow-visible;
  }

  .nav-container {
    @apply mx-auto flex max-w-6xl flex-col items-center justify-between sm:flex-row;
    position: relative;
    z-index: 1000;
  }

  .top-nav-wrap {
    @apply relative flex w-full items-start justify-between p-4 sm:items-center sm:py-8;
  }

  .logo-link {
    @apply flex items-center;
  }

  .logo-image {
    @apply h-24 w-auto;
  }

  .hamburger-menu {
    @apply self-end p-2 sm:hidden;
  }

  .hamburger-menu svg {
    @apply h-6 w-6 scale-125 fill-skin-base;
  }

  .menu-icon line {
    @apply transition-opacity duration-75 ease-in-out;
  }

  .menu-icon .close {
    opacity: 0;
  }

  .menu-icon.is-active .line {
    @apply opacity-0;
  }

  .menu-icon.is-active .close {
    @apply opacity-100;
  }

  /* Navigation */
  nav {
    @apply flex w-full flex-col items-center sm:ml-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0;
  }

  nav ul {
    @apply mt-4 grid w-44 grid-cols-2 grid-rows-4 gap-x-2 gap-y-2 sm:ml-0 sm:mt-0 sm:w-auto sm:gap-x-5 sm:gap-y-0;
  }

  nav ul li {
    @apply col-span-2 flex items-center justify-center;
  }

  /* Fixed: Ensure all nav links and buttons get proper styling */
  nav ul li a,
  nav ul li .dropdown-toggle,
  nav ul li button {
    @apply w-full px-4 py-3 text-center font-medium hover:text-skin-accent sm:my-0 sm:px-2 sm:py-1;
    transition: all 0.2s ease;
  }

  nav ul li:nth-last-child(2) a {
    @apply w-auto;
  }

  nav ul li:nth-last-child(1),
  nav ul li:nth-last-child(2) {
    @apply col-span-1;
  }

  /* Fixed: Ensure active state works for all nav elements */
  nav .active,
  nav a.active,
  nav button.active,
  nav .dropdown-toggle.active {
    @apply underline decoration-2 underline-offset-4 text-skin-accent;
  }

  nav a.active svg {
    @apply fill-skin-accent;
  }

  nav button {
    @apply p-1;
  }

  nav button svg {
    @apply h-6 w-6 fill-skin-base hover:fill-skin-accent;
  }

  #theme-btn {
    @apply p-3 sm:p-1;
  }

  #theme-btn svg {
    @apply scale-125 hover:rotate-12 sm:scale-100;
  }

  /* SIMPLIFIED DROPDOWN STYLES */
  .dropdown {
    @apply relative;
  }

  .dropdown-toggle {
    @apply inline-flex items-center justify-center gap-1 cursor-pointer border-none bg-transparent;
    transition: color 0.2s ease;
  }

  .dropdown-arrow {
    transition: transform 0.2s ease;
  }

  /* Clean rectangular dropdown menu */
  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-top: 8px;
    min-width: 140px;
    background: white;
    border: 1px solid #000;
    border-radius: 0;
    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 9999;
    padding: 0;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  /* Show dropdown on hover (desktop) */
  @media (min-width: 640px) {
    .dropdown:hover .dropdown-menu {
      opacity: 1;
      visibility: visible;
    }
    
    .dropdown:hover .dropdown-arrow {
      transform: rotate(180deg);
    }
  }

  /* Show dropdown on click (mobile) */
  .dropdown.open .dropdown-menu {
    opacity: 1;
    visibility: visible;
  }

  .dropdown.open .dropdown-arrow {
    transform: rotate(180deg);
  }

  /* Dropdown menu items with black separators and grey hover */
  .dropdown-menu li {
    margin: 0;
    padding: 0;
    border-bottom: 1px solid #000;
    width: 100%;
    display: block;
    position: relative; /* For absolute positioning of link */
  }

  .dropdown-menu li:last-child {
    border-bottom: none;
  }

  .dropdown-menu a {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    padding: 12px 16px;
    text-decoration: none;
    color: inherit;
    background: white;
    transition: background-color 0.2s ease;
    border: none;
    border-radius: 0;
    font-weight: normal;
    text-align: left;
    box-sizing: border-box;
    margin: 0;
    width: auto; /* Let absolute positioning handle the width */
    height: auto; /* Let absolute positioning handle the height */
  }

  /* Set minimum height for li to ensure proper sizing */
  .dropdown-menu li {
    min-height: 44px; /* Ensure consistent height */
    cursor: pointer;
  }

  .dropdown-menu li:hover {
    background-color: #f5f5f5;
  }

  .dropdown-menu li:hover a {
    background-color: #f5f5f5;
    color: inherit;
  }

  /* Ensure no gaps or margins that could break hover */
  .dropdown-menu {
    padding: 0;
    margin: 0;
  }

  .dropdown-menu ul {
    padding: 0;
    margin: 0;
    list-style: none;
  }

  /* Mobile dropdown adjustments */
  @media (max-width: 640px) {
    .dropdown-menu {
      position: static;
      margin-top: 8px;
      transform: none;
      box-shadow: none;
      border: 1px solid #ccc;
      background: #f9f9f9;
    }
    
    .dropdown-menu a {
      padding: 12px 16px;
      text-align: center;
      background: #f9f9f9;
    }

    .dropdown-menu a:hover {
      background-color: #e5e5e5;
    }
  }

  /* Additional fix for LinkButton active states */
  .focus-outline.active,
  :global(.focus-outline.active) {
    @apply underline decoration-2 underline-offset-4 text-skin-accent;
  }

  /* Ensure LinkButton spans get active styling */
  .focus-outline.active span,
  :global(.focus-outline.active span) {
    @apply text-skin-accent;
  }
</style>

<script>
  // Toggle mobile menu
  function toggleNav() {
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const menuItems = document.querySelector("#menu-items");

    menuBtn?.addEventListener("click", () => {
      const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
      menuIcon?.classList.toggle("is-active");
      menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
      menuBtn.setAttribute("aria-label", menuExpanded ? "Open Menu" : "Close Menu");
      menuItems?.classList.toggle("display-none");
    });
  }

  // Dropdown functionality
  function initDropdowns() {
    const dropdowns = document.querySelectorAll('.dropdown');
    
    dropdowns.forEach(dropdown => {
      const toggle = dropdown.querySelector('.dropdown-toggle');
      
      if (!toggle) return;
      
      // Mobile: click to toggle
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Only handle clicks on mobile
        if (window.innerWidth < 640) {
          dropdown.classList.toggle('open');
        }
      });
      
      // Desktop: prevent navigation on click
      if (window.innerWidth >= 640) {
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
        });
      }
    });
    
    // Close dropdowns when clicking outside (mobile)
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.dropdown') && window.innerWidth < 640) {
        dropdowns.forEach(dropdown => {
          dropdown.classList.remove('open');
        });
      }
    });
  }

  // Initialize
  toggleNav();
  initDropdowns();

  // Re-initialize after Astro navigation
  document.addEventListener("astro:after-swap", () => {
    toggleNav();
    initDropdowns();
  });
</script>