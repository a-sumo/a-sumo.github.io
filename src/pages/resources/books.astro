---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";

const books = [
  {
    title: "Development In Progress",
    author: "The Consilience Project",
    image: "/assets/books/Development-In-Progress.png",
    comment: ""
  },
  {
    title: "Operating Manual for Spaceship Earth",
    author: "Richard Buckminster Fuller",
    image: "/assets/books/Operating-Manual-for-Spaceship-Earth.jpg",
    comment: ""
  },
  {
    title: "Introduction to the Theory of Computation",
    author: "Michael Sipser",
    image: "/assets/books/Introduction-To-The-Theory-Of-Computation.jpg",
    comment: ""
  },
  {
    title: "How to Prove It - A Structured Approach",
    author: "Daniel J. Velleman",
    image: "/assets/books/How-To-Prove-It.jpg",
    comment: ""
  },
  {
    title: "Lectures On Art",
    author: "John Ruskin",
    image: "/assets/books/Lectures-On-Art.jpg",
    comment: ""
  },
  {
    title: "The Master and His Emissary",
    author: "Iain McGilchrist",
    image: "/assets/books/The-Master-And-His-Emissary.jpg",
    comment: ""
  },
  {
    title: "Wholeness and The Implicate Order",
    author: "David Bohm",
    image: "/assets/books/Wholeness-And-The-Implicate-Order.jpg",
    comment: ""
  },
  {
    title: "Tao Te Ching",
    author: "Lao Tzu",
    image: "/assets/books/Tao-Te-Ching.jpg",
    comment: ""
  },
  {
    title: "The Sound of Silence",
    author: "Ajahn Sumedho",
    image: "/assets/books/The-Sound-Of-Silence.jpg",
    comment: ""
  },
];
---

<Layout title="Reading List - Resources">
  <Header activeNav="resources" />
  <Breadcrumbs />
  <main id="main-content">
    <section class="py-12 px-4">
      <div class="mx-auto max-w-4xl">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-8">
          {books.map((book, index) => (
            <article class="flex flex-col items-center text-center">
              <!-- Fixed height title container with overflow handling -->
              <div class="h-24 mb-4 flex items-center justify-center w-full">
                <h3 class="text-lg font-medium text-skin-base leading-tight line-clamp-4 px-2">
                  {book.title} â€“ {book.author}
                </h3>
              </div>
              
              <!-- Image container with placeholder and smooth loading -->
              <div class="mb-4 relative w-64">
                <!-- Placeholder div to prevent layout shift -->
                <div class={`w-64 h-80 bg-gray-200 border border-skin-border flex items-center justify-center book-placeholder absolute top-0 left-0 z-10 book-placeholder-${index}`}>
                  <div class="w-8 h-8 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                </div>
                <!-- Actual image -->
                <img 
                  src={book.image} 
                  alt={`Cover of ${book.title}`}
                  class={`w-64 h-auto border border-skin-border object-cover book-image opacity-0 transition-opacity duration-300 book-image-${index}`}
                  loading="lazy"
                  data-index={index}
                />
              </div>
              
              {book.comment && (
                <p class="text-sm text-skin-base leading-relaxed max-w-64">
                  {book.comment}
                </p>
              )}
            </article>
          ))}
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>

<style>
  /* Custom CSS for line clamping if Tailwind's line-clamp doesn't work */
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Image loading styles */
  .book-placeholder {
    background-color: #f5f5f5;
    transition: opacity 0.3s ease;
  }

  .book-image {
    transition: opacity 0.3s ease;
  }

  .book-image.loaded {
    opacity: 1;
  }

  .book-placeholder.hidden {
    opacity: 0;
    pointer-events: none;
    z-index: -1;
  }

  /* Ensure consistent spacing */
  article {
    min-height: 400px;
  }
</style>

<script>
  function handleImageLoading() {
    const images = document.querySelectorAll('.book-image');
    
    images.forEach((img) => {
      const index = img.dataset.index;
      const placeholder = document.querySelector(`.book-placeholder-${index}`);
      
      if (!placeholder) {
        console.warn('Placeholder not found for image', index);
        return;
      }

      // Reset states first
      img.classList.remove('loaded');
      placeholder.classList.remove('hidden');
      
      // Function to show image and hide placeholder
      const showImage = () => {
        img.classList.add('loaded');
        placeholder.classList.add('hidden');
      };

      // Function to show error state
      const showError = () => {
        placeholder.innerHTML = '<div class="text-gray-500 text-sm p-4">Image not available</div>';
        placeholder.classList.remove('hidden');
      };

      // If image is already loaded (cached)
      if (img.complete) {
        if (img.naturalHeight !== 0) {
          showImage();
        } else {
          showError();
        }
      } else {
        // Set up event listeners for loading
        const onLoad = () => {
          showImage();
          cleanup();
        };

        const onError = () => {
          showError();
          cleanup();
        };

        const cleanup = () => {
          img.removeEventListener('load', onLoad);
          img.removeEventListener('error', onError);
        };

        img.addEventListener('load', onLoad);
        img.addEventListener('error', onError);

        // Timeout fallback - if image doesn't load within 10 seconds, show error
        setTimeout(() => {
          if (!img.classList.contains('loaded')) {
            console.warn('Image loading timeout for:', img.src);
            showError();
            cleanup();
          }
        }, 10000);
      }
    });
  }

  // Handle initial page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', handleImageLoading);
  } else {
    handleImageLoading();
  }

  // Handle Astro page transitions
  document.addEventListener('astro:after-swap', handleImageLoading);

  // Optional: Add a manual retry mechanism
  window.retryImageLoading = function() {
    console.log('Manually retrying image loading...');
    handleImageLoading();
  };
</script>