---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";

const books = [
  {
    title: "Development In Progress",
    author: "The Consilience Project",
    image: "/assets/books/Development-In-Progress.png",
    comment: ""
  },
  {
    title: "Operating Manual for Spaceship Earth",
    author: "Richard Buckminster Fuller",
    image: "/assets/books/Manual-Bucky.jpg",
    comment: ""
  },
  {
    title: "Introduction to the Theory of Computation",
    author: "Michael Sipser",
    image: "/assets/books/Introduction-To-The-Theory-Of-Computation.jpg",
    comment: ""
  },
  {
    title: "How to Prove It - A Structured Approach",
    author: "Daniel J. Velleman",
    image: "/assets/books/How-To-Prove-It.jpg",
    comment: ""
  },
  {
    title: "The Heroic Heart - Awakening Unbound Compassion",
    author: "Jetsunna Tenzin Palmo",
    image: "/assets/books/The-Heroic-Heart.jpg",
    comment: ""
  },
    {
    title: "Who Is Pulling the Strings?",
    author: "Ajahn Amaro",
    image: "/assets/books/Who-Is-Pulling-The-Strings.png",
    comment: ""
  },
  
  {
    title: "The Master and His Emissary",
    author: "Iain McGilchrist",
    image: "/assets/books/The-Master-And-His-Emissary.jpg",
    comment: ""
  },
  {
    title: "The Art of Communicating",
    author: "Thich Nhat Hanh",
    image: "/assets/books/The-Art-Of-Communicating.jpg",
    comment: ""
  },
  {
    title: "Wholeness and The Implicate Order",
    author: "David Bohm",
    image: "/assets/books/Wholeness-And-The-Implicate-Order.jpg",
    comment: ""
  },
  {
    title: "Lectures On Art",
    author: "John Ruskin",
    image: "/assets/books/Lectures-On-Art.jpg",
    comment: ""
  },
  {
    title: "Tao Te Ching",
    author: "Lao Tzu",
    image: "/assets/books/Tao-Te-Ching.jpg",
    comment: ""
  },
  {
    title: "The Sound of Silence",
    author: "Ajahn Sumedho",
    image: "/assets/books/The-Sound-Of-Silence.jpg",
    comment: ""
  },
  {
    title: "SYNERGETICS. Explorations in the Geometry of Thinking",
    author: "Richard Buckminster Fuller",
    image: "/assets/books/Synergetics.jpg",
    comment: ""
  },
];
---

<Layout title="Reading List - Resources">
  <Header activeNav="resources" />
  <Breadcrumbs />
  
  <!-- Critical resource hints for fastest loading -->
  <link slot="head" rel="preconnect" href={new URL(Astro.url.origin).origin}>
  <link slot="head" rel="dns-prefetch" href={new URL(Astro.url.origin).origin}>
  
  <!-- Preload first 4 images immediately -->
  {books.slice(0, 4).map(book => (
    <link slot="head" rel="preload" as="image" href={book.image} />
  ))}

  <main id="main-content">
    <section class="py-12 px-4">
      <div class="mx-auto max-w-4xl">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-8">
          {books.map((book, index) => (
            <article class="flex flex-col items-center text-center">
              <!-- Fixed height title container -->
              <div class="h-24 mb-4 flex items-center justify-center w-full">
                <h3 class="text-lg font-medium text-skin-base leading-tight line-clamp-4 px-2">
                  {book.title} â€“ {book.author}
                </h3>
              </div>
              
              <!-- Image container -->
              <div class="mb-4 relative max-w-72">
                <!-- Placeholder that shows while loading -->
                <div class={`bg-gradient-to-br from-gray-100 to-gray-200 border border-skin-border flex items-center justify-center book-placeholder book-placeholder-${index} transition-opacity duration-200 min-h-64`}>
                  <div class="text-gray-400 text-xs text-center px-4">
                    <div class="w-6 h-6 mx-auto mb-2 opacity-40">
                      <svg viewBox="0 0 24 24" fill="currentColor">
                        <path d="M6 2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm0 2v16h12V4H6zm2 2h8v2H8V6zm0 4h8v2H8v-2zm0 4h5v2H8v-2z"/>
                      </svg>
                    </div>
                    Loading...
                  </div>
                </div>
  
                <!-- Image that replaces placeholder -->
                <img 
                  src={book.image} 
                  alt={`Cover of ${book.title}`}
                  class={`w-full border border-skin-border object-cover book-image book-image-${index} opacity-0 transition-opacity duration-300 absolute top-0 left-0`}
                  loading={index < 4 ? "eager" : "lazy"}
                  fetchpriority={index < 2 ? "high" : "auto"}
                  decoding="async"
                  data-index={index}
                  sizes="256px"
                />
              </div>
                            
              {book.comment && (
                <p class="text-sm text-skin-base leading-relaxed max-w-64">
                  {book.comment}
                </p>
              )}
            </article>
          ))}
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>

<style>
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Optimized loading states */
  .book-placeholder {
    backdrop-filter: blur(2px);
  }

  .book-image {
    image-rendering: crisp-edges;
    image-rendering: -webkit-optimize-contrast;
  }

  .book-image.loaded {
    opacity: 1;
  }

  .book-placeholder.hidden {
    opacity: 0;
    pointer-events: none;
  }

  /* Consistent spacing */
  article {
    min-height: 400px;
  }

  /* Progressive enhancement for connection speed */
  @media (prefers-reduced-data: reduce) {
    .book-image {
      loading: lazy;
    }
  }
</style>

<script>
  // Aggressive optimization strategies
  const RETRY_ATTEMPTS = 3;
  const RETRY_DELAY = 500;
  const LOAD_TIMEOUT = 3000;

  function preloadNextImages() {
    // Aggressively preload next batch
    const images = document.querySelectorAll('.book-image[data-index]');
    const visibleImages = Array.from(images).filter(img => {
      const rect = img.getBoundingClientRect();
      return rect.bottom >= 0 && rect.top <= window.innerHeight + 500;
    });
    
    visibleImages.forEach(img => {
      if (!img.complete) {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.as = 'image';
        link.href = img.src;
        document.head.appendChild(link);
      }
    });
  }

  function handleImageLoading() {
    const images = document.querySelectorAll('.book-image');
    
    images.forEach((img, imgIndex) => {
      const index = img.dataset.index;
      const placeholder = document.querySelector(`.book-placeholder-${index}`);
      
      if (!placeholder) return;

      let retryCount = 0;
      let timeoutId;

      const showImage = () => {
        clearTimeout(timeoutId);
        // Instead of just showing the image, replace the placeholder
        const container = img.parentElement;
        container.style.height = 'auto';
        placeholder.style.display = 'none';
        img.style.position = 'static';
        img.classList.add('loaded');
      };

      const showError = () => {
        clearTimeout(timeoutId);
        // Gracefully hide the entire image container
        const container = img.parentElement;
        container.style.display = 'none';
        
        // Or if you prefer to fade it out:
        // container.style.opacity = '0';
        // container.style.pointerEvents = 'none';
      };

      const attemptLoad = () => {
        clearTimeout(timeoutId);
        
        // Create new image to force fresh load
        const newImg = new Image();
        newImg.crossOrigin = "anonymous";
        
        const onSuccess = () => {
          img.src = newImg.src;
          showImage();
        };

        const onFailed = () => {
          retryCount++;
          if (retryCount < RETRY_ATTEMPTS) {
            setTimeout(attemptLoad, RETRY_DELAY * retryCount);
          } else {
            showError();
          }
        };

        newImg.onload = onSuccess;
        newImg.onerror = onFailed;
        
        // Timeout fallback
        timeoutId = setTimeout(onFailed, LOAD_TIMEOUT);
        
        newImg.src = img.src;
      };

      // Check if already loaded
      if (img.complete && img.naturalHeight !== 0) {
        showImage();
      } else {
        attemptLoad();
      }
    });
  }

  // Global retry function
  window.retryImage = function(index) {
    const img = document.querySelector(`.book-image-${index}`);
    const placeholder = document.querySelector(`.book-placeholder-${index}`);
    if (img && placeholder) {
      img.classList.remove('loaded');
      placeholder.classList.remove('hidden');
      placeholder.innerHTML = `
        <div class="text-gray-400 text-xs text-center px-4">
          <div class="w-6 h-6 mx-auto mb-2 opacity-40">
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M6 2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm0 2v16h12V4H6zm2 2h8v2H8V6zm0 4h8v2H8v-2zm0 4h5v2H8v-2z"/>
            </svg>
          </div>
          Loading...
        </div>
      `;
      handleImageLoading();
    }
  };

  // Intersection Observer for progressive loading
  const observerOptions = {
    root: null,
    rootMargin: '100px',
    threshold: 0.1
  };

  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        preloadNextImages();
      }
    });
  }, observerOptions);

  // Initialize everything
  function init() {
    handleImageLoading();
    
    // Observe scroll for preloading
    document.querySelectorAll('article').forEach(article => {
      imageObserver.observe(article);
    });

    // Preload on scroll
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(preloadNextImages, 100);
    }, { passive: true });
  }

  // Run on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Re-run on navigation
  document.addEventListener('astro:after-swap', init);
</script>